#ifndef GLENUMS_H__
#define GLENUMS_H__

#include <GL/glew.h>

namespace GLEnums
{
    enum class BUFFER_TYPE : GLuint
    {
        VERTEX = GL_ARRAY_BUFFER
        , INDEX = GL_ELEMENT_ARRAY_BUFFER
        , UNKNOWN
    };

    enum class BUFFER_USAGE : GLuint
    {
        STATIC = GL_STATIC_DRAW
        , DYNAMIC = GL_DYNAMIC_DRAW
        , STREAM = GL_STREAM_DRAW
        , UNKNOWN
    };

    enum class SHADER_TYPE : GLuint
    {
        VERTEX = GL_VERTEX_SHADER
        , TESS_CONTROL = GL_TESS_CONTROL_SHADER
        , TESS_EVALUATION = GL_TESS_EVALUATION_SHADER
        , GEOMETRY = GL_GEOMETRY_SHADER
        , PIXEL = GL_FRAGMENT_SHADER
        , COMPUTE = GL_COMPUTE_SHADER
        , UNKNOWN
    };

    enum class DATA_TYPE : GLuint
    {
        BYTE = GL_BYTE
        , UNSIGNED_BYTE = GL_UNSIGNED_BYTE
        , SHORT = GL_SHORT
        , UNSIGNED_SHORT = GL_UNSIGNED_SHORT
        , INT = GL_INT
        , UNSIGNED_INT = GL_UNSIGNED_INT
        , FLOAT = GL_FLOAT
        , BYTES_2 = GL_2_BYTES
        , BYTES_3 = GL_3_BYTES
        , BYTES_4 = GL_4_BYTES
        , DOUBLE = GL_DOUBLE
        , UNKNOWN
    };

    enum class UNIFORM_TYPE : GLuint
    {
        FLOAT = GL_FLOAT
        , FLOAT_VEC2 = GL_FLOAT_VEC2
        , FLOAT_VEC3 = GL_FLOAT_VEC3
        , FLOAT_VEC4 = GL_FLOAT_VEC4
        , INT = GL_INT
        , INT_VEC2 = GL_INT_VEC2
        , INT_VEC3 = GL_INT_VEC3
        , INT_VEC4 = GL_INT_VEC4
        , BOOL = GL_BOOL
        , BOOL_VEC2 = GL_BOOL_VEC2
        , BOOL_VEC3 = GL_BOOL_VEC3
        , BOOL_VEC4 = GL_BOOL_VEC4
        , FLOAT_MAT2 = GL_FLOAT_MAT2
        , FLOAT_MAT3 = GL_FLOAT_MAT3
        , FLOAT_MAT4 = GL_FLOAT_MAT4
        , SAMPLER_2D = GL_SAMPLER_2D
        , SAMPLER_CUBE = GL_SAMPLER_CUBE
        , FLOAT_MAT2X3 = GL_FLOAT_MAT2x3
        , FLOAT_MAT3X2 = GL_FLOAT_MAT3x2
        , FLOAT_MAT2X4 = GL_FLOAT_MAT2x4
        , FLOAT_MAT4X2 = GL_FLOAT_MAT4x2
        , FLOAT_MAT3X4 = GL_FLOAT_MAT3x4
        , FLOAT_MAT4X3 = GL_FLOAT_MAT4x3
        , UNKNOWN
    };

    enum class INTERNAL_FORMAT : GLuint
    {
        DEPTH_COMPONENT = GL_DEPTH_COMPONENT
        , DEPTH_STENCIL = GL_DEPTH_STENCIL
        , RED = GL_RED
        , RG = GL_RG
        , RGB = GL_RGB
        , RGBA = GL_RGBA
        , R8 = GL_R8
        , R8_SNORM = GL_R8_SNORM
        , R16 = GL_R16
        , R16_SNORM = GL_R16_SNORM
        , RG8 = GL_RG8
        , RG8_SNORM = GL_RG8_SNORM
        , RG16 = GL_RG16
        , RG16_SNORM = GL_RG16_SNORM
        , R3_G3_B2 = GL_R3_G3_B2
        , RGB4 = GL_RGB4
        , RGB5 = GL_RGB5
        , RGB8 = GL_RGB8
        , RGB8_SNORM = GL_RGB8_SNORM
        , RGB10 = GL_RGB10
        , RGB12 = GL_RGB12
        , RGB16_SNORM = GL_RGB16_SNORM
        , RGBA2 = GL_RGBA2
        , RGBA4 = GL_RGBA4
        , RGB5_A1 = GL_RGB5_A1
        , RGBA8 = GL_RGBA8
        , RGBA8_SNORM = GL_RGBA8_SNORM
        , RGB10_A2 = GL_RGB10_A2
        , RGB10_A2UI = GL_RGB10_A2UI
        , RGBA12 = GL_RGBA12
        , RGBA16 = GL_RGBA16
        , SRGB8 = GL_SRGB8
        , SRGB8_ALPHA8 = GL_SRGB8_ALPHA8
        , R16F = GL_R16F
        , RG16F = GL_RG16F
        , RGB16F = GL_RGB16F
        , RGBA16F = GL_RGBA16F
        , R32F = GL_R32F
        , RG32F = GL_RG32F
        , RGB32F = GL_RGB32F
        , RGBA32F = GL_RGBA32F
        , R11F_G11F_B10F = GL_R11F_G11F_B10F
        , RGB9_E5 = GL_RGB9_E5
        , R8I = GL_R8I
        , R8UI = GL_R8UI
        , R16I = GL_R16I
        , R16UI = GL_R16UI
        , R32I = GL_R32I
        , R32UI = GL_R32UI
        , RG8I = GL_RG8I
        , RG8UI = GL_RG8UI
        , RG16I = GL_RG16I
        , RG16UI = GL_RG16UI
        , RG32I = GL_RG32I
        , RG32UI = GL_RG32UI
        , RGB8I = GL_RGB8I
        , RGB8UI = GL_RGB8UI
        , RGB16I = GL_RGB16I
        , RGB16UI = GL_RGB16UI
        , RGB32I = GL_RGB32I
        , RGB32UI = GL_RGB32UI
        , RGBA8I = GL_RGBA8I
        , RGBA8UI = GL_RGBA8UI
        , RGBA16I = GL_RGBA16I
        , RGBA16UI = GL_RGBA16UI
        , RGBA32I = GL_RGBA32I
        , RGBA32UI = GL_RGBA32UI
        , COMPRESSED_RED = GL_COMPRESSED_RED
        , COMPRESSED_RG = GL_COMPRESSED_RG
        , COMPRESSED_RGB = GL_COMPRESSED_RGB
        , COMPRESSED_RGBA = GL_COMPRESSED_RGBA
        , COMPRESSED_SRGB = GL_COMPRESSED_SRGB
        , COMPRESSED_SRGB_ALPHA = GL_COMPRESSED_SRGB_ALPHA
        , COMPRESSED_RED_RGTC1 = GL_COMPRESSED_RED_RGTC1
        , COMPRESSED_SIGNED_RED_RGTC1 = GL_COMPRESSED_SIGNED_RED_RGTC1
        , COMPRESSED_RG_RGTC2 = GL_COMPRESSED_RG_RGTC2
        , COMPRESSED_SIGNED_RG_RGTC2 = GL_COMPRESSED_SIGNED_RG_RGTC2
        , COMPRESSED_RGBA_BPTC_UNORM = GL_COMPRESSED_RGBA_BPTC_UNORM
        , COMPRESSED_SRGB_ALPHA_BPTC_UNORM = GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM
        , COMPRESSED_RGB_BPTC_SIGNED_FLOAT = GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT
        , COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT = GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT
    };

    enum class FORMAT : GLuint
    {
        RED = GL_RED
        , RG = GL_RG
        , RGB = GL_RGB
        , BGR = GL_BGR
        , RGBA = GL_RGBA
        , BGRA = GL_BGRA
        , RED_INTEGER = GL_RED_INTEGER
        , RG_INTEGER = GL_RG_INTEGER
        , RGB_INTEGER = GL_RGB_INTEGER
        , BGR_INTEGER = GL_BGR_INTEGER
        , RGBA_INTEGER = GL_RGBA_INTEGER
        , BGRA_INTEGER = GL_BGRA_INTEGER
        , STENCIL_INDEX = GL_STENCIL_INDEX
        , DEPTH_COMPONENT = GL_DEPTH_COMPONENT
        , DEPTH_STENCIL = GL_DEPTH_STENCIL
    };

    enum class TYPE : GLuint
    {
        UNSIGNED_BYTE = GL_UNSIGNED_BYTE
        , BYTE = GL_BYTE
        , UNSIGNED_SHORT = GL_UNSIGNED_SHORT
        , SHORT = GL_SHORT
        , UNSIGNED_INT = GL_UNSIGNED_INT
        , INT = GL_INT
        , FLOAT = GL_FLOAT
        , UNSIGNED_BYTE_3_3_2 = GL_UNSIGNED_BYTE_3_3_2
        , UNSIGNED_BYTE_2_3_3_REV = GL_UNSIGNED_BYTE_2_3_3_REV
        , UNSIGNED_SHORT_5_6_5 = GL_UNSIGNED_SHORT_5_6_5
        , UNSIGNED_SHORT_5_6_5_REV = GL_UNSIGNED_SHORT_5_6_5_REV
        , UNSIGNED_SHORT_4_4_4_4 = GL_UNSIGNED_SHORT_4_4_4_4
        , UNSIGNED_SHORT_4_4_4_4_REV = GL_UNSIGNED_SHORT_4_4_4_4_REV
        , UNSIGNED_SHORT_5_5_5_1 = GL_UNSIGNED_SHORT_5_5_5_1
        , UNSIGNED_SHORT_1_5_5_5_REV = GL_UNSIGNED_SHORT_1_5_5_5_REV
        , UNSIGNED_INT_8_8_8_8 = GL_UNSIGNED_INT_8_8_8_8
        , UNSIGNED_INT_8_8_8_8_REV = GL_UNSIGNED_INT_8_8_8_8_REV
        , UNSIGNED_INT_10_10_10_2 = GL_UNSIGNED_INT_10_10_10_2
        , UNSIGNED_INT_2_10_10_10_REV = GL_UNSIGNED_INT_2_10_10_10_REV
    };

    enum class TARGET : GLuint
    {
        ARRAY_BUFFER = GL_ARRAY_BUFFER
        , ATOMIC_COUNTER_BUFFER = GL_ATOMIC_COUNTER_BUFFER
        , COPY_READ_BUFFER = GL_COPY_READ_BUFFER
        , COPY_WRITE_BUFFER = GL_COPY_WRITE_BUFFER
        , DISPATCH_INDIRECT_BUFFER = GL_DISPATCH_INDIRECT_BUFFER
        , DRAW_INDIRECT_BUFFER = GL_DRAW_INDIRECT_BUFFER
        , ELEMENT_ARRAY_BUFFER = GL_ELEMENT_ARRAY_BUFFER
        , PIXEL_PACK_BUFFER = GL_PIXEL_PACK_BUFFER
        , PIXEL_UNPACK_BUFFER = GL_PIXEL_UNPACK_BUFFER
        , QUERY_BUFFER = GL_QUERY_BUFFER
        , SHADER_STORAGE_BUFFER = GL_SHADER_STORAGE_BUFFER
        , TEXTURE_BUFFER = GL_TEXTURE_BUFFER
        , TRANSFORM_FEEDBACK_BUFFER = GL_TRANSFORM_FEEDBACK_BUFFER
        , UNIFORM_BUFFER = GL_UNIFORM_BUFFER
    };

    enum class ACCESS : GLuint
    {
        READ_ONLY = GL_READ_ONLY
        , WRITE_ONLY = GL_WRITE_ONLY
        , READ_WRITE = GL_READ_WRITE
    };

    enum class MAP_ACCESS : GLuint
    {
        MAP_READ_BIT = GL_MAP_READ_BIT
        , MAP_WRITE_BIT = GL_MAP_WRITE_BIT
        , MAP_PERSISTENT_BIT = GL_MAP_PERSISTENT_BIT
        , MAP_COHERENT_BIT = GL_MAP_COHERENT_BIT
        , MAP_INVALIDATE_RANGE_BIT = GL_MAP_INVALIDATE_RANGE_BIT
        , MAP_INVALIDATE_BUFFER_BIT = GL_MAP_INVALIDATE_BUFFER_BIT
        , MAP_FLUSH_EXPLICIT_BIT = GL_MAP_FLUSH_EXPLICIT_BIT
        , MAP_UNSYNCHRONIZED_BIT = GL_MAP_UNSYNCHRONIZED_BIT
    };
}

GLEnums::MAP_ACCESS operator|(GLEnums::MAP_ACCESS lhs, GLEnums::MAP_ACCESS rhs)
{
    return (GLEnums::MAP_ACCESS)((GLenum)lhs | (GLenum)rhs);
}

#endif //GLENUMS_H__
