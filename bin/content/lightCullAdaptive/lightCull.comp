#version 450 core

#include "commonIncludes.glsl"

uniform mat4 viewMatrix;
uniform mat4 projectionInverseMatrix;

#include "planes.glsl"
#include "tree.glsl"
#include "tileLights.glsl"

shared int lightCount;
shared int localLightIndices[MAX_LIGHTS_PER_TILE];

void AddLightIfPossible(int lightIndex)
{
    int index = atomicAdd(lightCount, 1);

    if(index < MAX_LIGHTS_PER_TILE)
        localLightIndices[index] = lightIndex;
}

layout(local_size_x = THREADS_PER_GROUP_X, local_size_y = THREADS_PER_GROUP_Y) in;
void main()
{
    if(gl_LocalInvocationIndex == 0)
        lightCount = 0;

    barrier();

    int workGroupSizeX = screenWidth / int(pow(2, treeStartDepth));
    int workGroupSizeY = screenHeight / int(pow(2, treeStartDepth));

    int workGroupCountX = screenWidth / int(ceil(workGroupSizeX));

    for(int i = int(gl_LocalInvocationIndex); i < int(lights.length()); i += int(THREADS_PER_GROUP_X * THREADS_PER_GROUP_Y))
    {
        LightData light = lights[i];

        vec3 viewPositions[5] = CreateFarPoints(uvec2(workGroupSizeX, workGroupSizeY));
        vec4 planes[4] = CreatePlanes(viewPositions);

        vec3 lightViewPosition = vec3(viewMatrix * vec4(light.position, 1.0f));

        lights[i].position = lightViewPosition;

        if(dot(lightViewPosition, lightViewPosition) > light.strength * light.strength)
        {
            bool inside = false;

            vec3 planeForward = normalize(viewPositions[CENTER]);
            if(dot(normalize(lightViewPosition), planeForward) > 0.0f)
            {
                inside = true;

                for(int j = 0; j < 4; ++j)
                {
                    float dist = dot(lightViewPosition, vec3(planes[j])) + planes[j].w;
                    if(dist < -light.strength)
                    //if(dist < 0.0f)
                    {
                        inside = false;
                        break;
                    }
                }
            }

            if(inside)
                AddLightIfPossible(i);
        }
        else
            AddLightIfPossible(i);
    }

    barrier();

    if(gl_LocalInvocationIndex == 0)
    {
        int treeIndex = GetTreeLinearIndex(int(gl_WorkGroupID.x), int(gl_WorkGroupID.y), treeStartDepth, treeMaxDepth);
        int startIndex = treeIndex * MAX_LIGHTS_PER_TILE;

        PutTreeDataTile(int(gl_WorkGroupID.x), int(gl_WorkGroupID.y), treeStartDepth, treeIndex);

        int cappedLightCount = min(lightCount, MAX_LIGHTS_PER_TILE);
        for(int i = 0; i < cappedLightCount; ++i)
            SetLightIndex(startIndex + i, localLightIndices[i]);
        for(int i = cappedLightCount; i < MAX_LIGHTS_PER_TILE; ++i)
            SetLightIndex(startIndex + i, -1);

        TileLightData data;
        data.start = startIndex;
        data.numberOfLights = lightCount;
        data.padding = ivec2(gl_WorkGroupID);

        SetTileLightData(treeIndex, data);
    }
}