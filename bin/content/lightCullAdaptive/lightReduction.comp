#version 450 core

#include "commonIncludes.glsl"

//uniform mat4 viewMatrix;
uniform mat4 projectionInverseMatrix;

#include "planes.glsl"
#include "tree.glsl"
#include "tileLights.glsl"

shared int lightCount;
shared int localLightIndices[MAX_LIGHTS_PER_TILE];

shared int currentStartIndex;
shared int currentLightCount;

uniform int oldDepth;
uniform int newDepth;

void AddLightIfPossible(int lightIndex)
{
    int index = atomicAdd(lightCount, 1);

    if(index < MAX_LIGHTS_PER_TILE)
        localLightIndices[index] = lightIndex;
}

layout(local_size_x = THREADS_PER_GROUP_X, local_size_y = THREADS_PER_GROUP_Y) in;
void main()
{
    int newTileSizeX = screenWidth / int(pow(2, newDepth));
    int newTileSizeY = screenHeight / int(pow(2, newDepth));

    if(gl_LocalInvocationIndex == 0)
    {
        lightCount = 0;

        int oldArrayIndex = GetTreeDataGrid(int(gl_WorkGroupID.x / 2), int(gl_WorkGroupID.y / 2), oldDepth);

        if(oldArrayIndex >= 0)
        {
            TileLightData tileData = GetTileLightData(oldArrayIndex);

            currentStartIndex = tileData.start;
            currentLightCount = tileData.numberOfLights;
        }
        else
        {
            currentStartIndex = -1;
            currentLightCount = -1;

            /*PutTreeDataTile(int(gl_WorkGroupID.x), int(gl_WorkGroupID.y), newDepth, currentStartIndex);

            TileLightData data;
            data.start = currentStartIndex;
            data.numberOfLights = currentLightCount;
            data.padding = ivec2(gl_WorkGroupID);

            int arrayIndex = GetTreeLinearIndex(int(gl_WorkGroupID.x), int(gl_WorkGroupID.y), newDepth, treeMaxDepth);
            int startIndex = arrayIndex * MAX_LIGHTS_PER_TILE;

            SetTileLightData(startIndex, data);*/
        }
    }

    memoryBarrier();
    barrier();

    if(currentLightCount >= 0)
    {
        // Divide tile, check collision for all lights inside this tile again
        vec3 viewPositions[5] = CreateFarPoints(uvec2(newTileSizeX, newTileSizeY));
        vec4 planes[4] = CreatePlanes(viewPositions);

        //for(int i = currentStartIndex + int(gl_LocalInvocationIndex); i < currentStartIndex + currentLightCount; i += int(THREADS_PER_GROUP_X * THREADS_PER_GROUP_Y))
        for(int i = int(gl_LocalInvocationIndex); i < lights.length(); i += int(THREADS_PER_GROUP_X * THREADS_PER_GROUP_Y))
        {
            //int lightIndex = GetLightIndex(i);
            int lightIndex = i;

            LightData light = lights[lightIndex];

            vec3 lightViewPosition = light.position;

            if(dot(lightViewPosition, lightViewPosition) > light.strength * light.strength)
            {
                bool inside = false;
                //bool inside = true;

                vec3 planeForward = normalize(viewPositions[CENTER]);
                if(dot(normalize(lightViewPosition), planeForward) > 0.0f)
                {
                    inside = true;

                    for(int j = 0; j < 4; ++j)
                    {
                        float dist = dot(lightViewPosition, vec3(planes[j])) + planes[j].w;
                        if(dist < -light.strength)
                        //if(dist < 0.0f)
                        {
                            inside = false;
                            //inside = true;
                            break;
                        }
                    }
                }

                if(inside)
                    AddLightIfPossible(lightIndex);
            }
            else
                AddLightIfPossible(lightIndex);
        }

        barrier();

        if(gl_LocalInvocationIndex == 0)
        {
            int treeIndex = GetTreeLinearIndex(int(gl_WorkGroupID.x), int(gl_WorkGroupID.y), newDepth, treeMaxDepth);

            PutTreeDataTile(int(gl_WorkGroupID.x), int(gl_WorkGroupID.y), newDepth, treeIndex);

            int startIndex = treeIndex * MAX_LIGHTS_PER_TILE;
            int cappedLightCount = min(lightCount, MAX_LIGHTS_PER_TILE);
            for(int i = 0; i < cappedLightCount; ++i)
                SetLightIndex(startIndex + i, localLightIndices[i]);
            for(int i = cappedLightCount; i < MAX_LIGHTS_PER_TILE; ++i)
                SetLightIndex(startIndex + i, -1);

            TileLightData data;
            data.start = startIndex;
            data.numberOfLights = lightCount;
            data.padding = ivec2(gl_WorkGroupID);

            SetTileLightData(treeIndex, data);
        }
    }
}